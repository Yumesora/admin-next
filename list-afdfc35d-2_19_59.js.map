{"version":3,"file":"list-afdfc35d-2_19_59.js","sources":["../src/views/manage-posts/list.tsx"],"sourcesContent":["import Add12Filled from '@vicons/fluent/es/Add12Filled'\nimport Delete16Regular from '@vicons/fluent/es/Delete16Regular'\nimport { Table } from 'components/table'\nimport { EditColumn } from 'components/table/edit-column'\nimport { RelativeTime } from 'components/time/relative-time'\nimport { useInjector } from 'hooks/use-deps-injection'\nimport { useTable } from 'hooks/use-table'\nimport { omit } from 'lodash-es'\nimport { NButton, NPopconfirm, NSpace, useDialog, useMessage } from 'naive-ui'\nimport {\n  FilterOption,\n  FilterState,\n  TableBaseColumn,\n  TableColumns,\n} from 'naive-ui/lib/data-table/src/interface'\nimport { CategoryStore } from 'stores/category'\nimport { parseDate } from 'utils/time'\nimport {\n  computed,\n  ComputedRef,\n  defineComponent,\n  onMounted,\n  reactive,\n  watch,\n} from 'vue'\nimport { RouterLink, useRoute } from 'vue-router'\nimport { HeaderActionButton } from '../../components/button/rounded-button'\nimport { ContentLayout } from '../../layouts/content'\nimport { PostModel, PostResponse } from '../../models/post'\nimport { RESTManager } from '../../utils/rest'\nexport const ManagePostListView = defineComponent({\n  name: 'PostList',\n  setup() {\n    const { loading, checkedRowKeys, data, pager, sortProps, fetchDataFn } =\n      useTable(\n        (data, pager) =>\n          async (page = route.query.page || 1, size = 20) => {\n            const response = await RESTManager.api.posts.get<PostResponse>({\n              params: {\n                page,\n                size,\n                select:\n                  'title _id id created modified categoryId copyright tags',\n                ...(sortProps.sortBy\n                  ? { sortBy: sortProps.sortBy, sortOrder: sortProps.sortOrder }\n                  : {}),\n              },\n            })\n\n            data.value = response.data\n            pager.value = response.page\n          },\n      )\n\n    const message = useMessage()\n    const dialog = useDialog()\n\n    const route = useRoute()\n    const fetchData = fetchDataFn\n    watch(\n      () => route.query.page,\n      async (n) => {\n        // @ts-expect-error\n        await fetchData(n)\n      },\n    )\n\n    const categoryStore = useInjector(CategoryStore)\n\n    onMounted(async () => {\n      await fetchData()\n      await categoryStore.fetch()\n    })\n\n    const DataTable = defineComponent({\n      setup() {\n        const categoryFilterOptions: ComputedRef<FilterOption[]> = computed(\n          () =>\n            categoryStore.data.value?.map((i) => ({\n              label: i.name,\n              value: i.id,\n            })) || [],\n        )\n\n        const columns = reactive<TableColumns<PostModel>>([\n          {\n            type: 'selection',\n            options: ['none', 'all'],\n          },\n          {\n            title: '标题',\n            sortOrder: false,\n            sorter: 'default',\n            key: 'title',\n            width: 200,\n            ellipsis: true,\n            render(row) {\n              return (\n                <RouterLink to={'/posts/edit?id=' + row.id}>\n                  {row.title}\n                </RouterLink>\n              )\n            },\n          },\n          {\n            title: '分类',\n            sortOrder: false,\n            sorter: 'default',\n            key: 'category',\n            width: 80,\n            ellipsis: true,\n            // @ts-expect-error\n            filterOptions: categoryFilterOptions,\n            filter: true,\n            render(row) {\n              const map = categoryStore.map.value\n\n              if (!map) {\n                return ''\n              }\n\n              return (\n                <EditColumn\n                  initialValue={\n                    categoryStore.map.value.get(row.categoryId)?.name ?? ''\n                  }\n                  onSubmit={async (v) => {\n                    message.info('TODO')\n                    // TODO\n                    // await RESTManager.api.posts(row.id).put({\n                    //   data: {\n                    //     categoryId: v,\n                    //   },\n                    // })\n\n                    // message.success('修改成功~!')\n                  }}\n                  type=\"select\"\n                  options={\n                    categoryStore.data.value?.map((i) => ({\n                      label: i.name,\n                      value: i.id,\n                      key: i.id,\n                    })) || []\n                  }\n                ></EditColumn>\n              )\n            },\n          },\n          {\n            title: '创建于',\n            width: 100,\n            key: 'created',\n            sortOrder: 'descend',\n            sorter: 'default',\n            render(row) {\n              return <RelativeTime time={row.created} />\n            },\n          },\n          {\n            title: '修改于',\n            key: 'modified',\n            sorter: 'default',\n            sortOrder: false,\n            width: 100,\n            render(row) {\n              return <RelativeTime time={row.modified} />\n            },\n          },\n          {\n            title: '操作',\n            fixed: 'right',\n            width: 60,\n            key: 'id',\n            render(row) {\n              return (\n                <NSpace>\n                  <NPopconfirm\n                    positiveText={'取消'}\n                    negativeText=\"删除\"\n                    onNegativeClick={async () => {\n                      await RESTManager.api.posts(row.id).delete()\n                      message.success('删除成功')\n                      await fetchData(pager.value.currentPage)\n                    }}\n                  >\n                    {{\n                      trigger: () => (\n                        <NButton text type=\"error\" size=\"tiny\">\n                          移除\n                        </NButton>\n                      ),\n\n                      default: () => (\n                        <span style={{ maxWidth: '12rem' }}>\n                          确定要删除 {row.title} ?\n                        </span>\n                      ),\n                    }}\n                  </NPopconfirm>\n                </NSpace>\n              )\n            },\n          },\n        ])\n\n        return () => (\n          <Table\n            loading={loading.value}\n            columns={columns}\n            data={data}\n            nTableProps={{\n              onUpdateFilters: async (\n                filterState: FilterState,\n                sourceColumn?: TableBaseColumn,\n              ) => {\n                if (!filterState) {\n                  return\n                }\n\n                if (\n                  filterState.category &&\n                  Array.isArray(filterState.category)\n                ) {\n                  const len = filterState.category.length\n                  if (!len) {\n                    await fetchData()\n                    return\n                  }\n                  const ids = filterState.category.join(',')\n\n                  let { data: _data } = (await RESTManager.api.categories.get({\n                    params: {\n                      ids,\n                    },\n                  })) as any\n                  _data = _data\n                    .map((c) => {\n                      return c.category.children.map((ch) => ({\n                        ...omit(c.category, ['children', 'id', 'id']),\n                        ...ch,\n                        categoryId: c.category.id,\n                      }))\n                    })\n                    .sort(\n                      (a, b) => new Date(a).getTime() - new Date(b).getTime(),\n                    )\n                    .flat()\n\n                  data.value = _data\n                  pager.value = {\n                    currentPage: 1,\n                    total: 1,\n                    size: 0,\n                    hasNextPage: false,\n                    hasPrevPage: false,\n                    totalPage: 1,\n                  }\n                }\n              },\n            }}\n            onFetchData={fetchData}\n            pager={pager}\n            onUpdateCheckedRowKeys={(keys) => {\n              checkedRowKeys.value = keys\n            }}\n            onUpdateSorter={async (props) => {\n              sortProps.sortBy = props.sortBy\n              sortProps.sortOrder = props.sortOrder\n            }}\n          ></Table>\n        )\n      },\n    })\n\n    return () => {\n      return (\n        <ContentLayout>\n          {{\n            actions: () => (\n              <>\n                <HeaderActionButton\n                  variant=\"error\"\n                  disabled={checkedRowKeys.value.length == 0}\n                  onClick={() => {\n                    dialog.warning({\n                      title: '警告',\n                      content: '你确定要删除？',\n                      positiveText: '确定',\n                      negativeText: '不确定',\n                      onPositiveClick: async () => {\n                        for (const id of checkedRowKeys.value) {\n                          await RESTManager.api.posts(id as string).delete()\n                        }\n                        checkedRowKeys.value.length = 0\n                        message.success('删除成功')\n\n                        await fetchData()\n                      },\n                    })\n                  }}\n                  icon={<Delete16Regular />}\n                />\n                <HeaderActionButton to={'/posts/edit'} icon={<Add12Filled />} />\n              </>\n            ),\n            default: () => <DataTable />,\n          }}\n        </ContentLayout>\n      )\n    }\n  },\n})\n"],"names":["ManagePostListView","defineComponent","name","setup","loading","checkedRowKeys","data","pager","sortProps","fetchDataFn","useTable","data2","pager2","async","page","route","query","size","response","RESTManager","api","posts","get","params","select","sortBy","sortOrder","value","message","useMessage","dialog","useDialog","useRoute","fetchData","n","categoryStore","useInjector","CategoryStore","fetch","DataTable","categoryFilterOptions","computed","map","i","label","id","columns","reactive","type","options","title","sorter","key","width","ellipsis","render","row","RouterLink","to","filterOptions","filter","EditColumn","initialValue","categoryId","onSubmit","v","info","RelativeTime","time","created","modified","fixed","NSpace","NPopconfirm","positiveText","negativeText","onNegativeClick","delete","success","currentPage","trigger","NButton","text","default","style","maxWidth","Table","nTableProps","onUpdateFilters","filterState","sourceColumn","category","Array","isArray","length","ids","join","_data","categories","c","children","ch","omit","sort","a","b","Date","getTime","flat","total","hasNextPage","hasPrevPage","totalPage","onFetchData","onUpdateCheckedRowKeys","keys","onUpdateSorter","props","ContentLayout","actions","HeaderActionButton","variant","disabled","onClick","warning","content","onPositiveClick","icon","Delete16Regular","Add12Filled"],"mappings":"slBA8BaA,EAAqBC,EAAgB,CAChDC,KAAM,WACNC,cACQC,QAAEA,iBAASC,OAAgBC,QAAMC,YAAOC,cAAWC,GACvDC,GACE,CAACC,EAAMC,IACLC,MAAOC,EAAOC,EAAMC,MAAMF,MAAQ,EAAGG,EAAO,YACpCC,QAAiBC,EAAYC,IAAIC,MAAMC,IAAkB,CAC7DC,OAAQ,CACNT,KAAAA,EACAG,KAAAA,EACAO,OACE,6DACEhB,EAAUiB,OACV,CAAEA,OAAQjB,EAAUiB,OAAQC,UAAWlB,EAAUkB,WACjD,QAIHC,MAAQT,EAASZ,OAChBqB,MAAQT,EAASJ,QAIzBc,EAAUC,IACVC,EAASC,IAEThB,EAAQiB,IACRC,EAAYxB,KAEhB,IAAMM,EAAMC,MAAMF,OAClBD,MAAOqB,UAECD,EAAUC,YAIdC,EAAgBC,EAAYC,MAExBxB,gBACFoB,UACAE,EAAcG,iBAGhBC,EAAYtC,EAAgB,CAChCE,cACQqC,EAAqDC,GACzD,kBACE,WAAcnC,KAAKqB,gBAAOe,KAAKC,KAC7BC,MAAOD,EAAEzC,KACTyB,MAAOgB,EAAEE,SACJ,MAGLC,EAAUC,EAAkC,CAChD,CACEC,KAAM,YACNC,QAAS,CAAC,OAAQ,QAEpB,CACEC,MAAO,KACPxB,WAAW,EACXyB,OAAQ,UACRC,IAAK,QACLC,MAAO,IACPC,UAAU,EACVC,OAAOC,KAEFC,EAAD,CAAYC,GAAI,kBAAoBF,EAAIX,IACrCW,EAAIN,QAKb,CACEA,MAAO,KACPxB,WAAW,EACXyB,OAAQ,UACRC,IAAK,WACLC,MAAO,GACPC,UAAU,EAEVK,cAAenB,EACfoB,QAAQ,EACRL,OAAOC,oBACOrB,EAAcO,IAAIf,QAO3BkC,EAAD,CACEC,aACE,SAAA,WAAcpB,IAAIf,MAAML,IAAIkC,EAAIO,sBAAa7D,QAAQ,GAEvD8D,SAAUnD,MAAOoD,MACPC,KAAK,SAUflB,KAAK,SACLC,SACE,WAAc3C,KAAKqB,gBAAOe,KAAKC,KAC7BC,MAAOD,EAAEzC,KACTyB,MAAOgB,EAAEE,GACTO,IAAKT,EAAEE,SACF,KAzBJ,KA+Bb,CACEK,MAAO,MACPG,MAAO,IACPD,IAAK,UACL1B,UAAW,UACXyB,OAAQ,UACRI,OAAOC,KACGW,EAAD,CAAcC,KAAMZ,EAAIa,WAGnC,CACEnB,MAAO,MACPE,IAAK,WACLD,OAAQ,UACRzB,WAAW,EACX2B,MAAO,IACPE,OAAOC,KACGW,EAAD,CAAcC,KAAMZ,EAAIc,YAGnC,CACEpB,MAAO,KACPqB,MAAO,QACPlB,MAAO,GACPD,IAAK,KACLG,OAAOC,KAEFgB,EAAD,OACGC,EAAD,CACEC,aAAc,KACdC,aAAa,KACbC,gBAAiB/D,gBACTM,EAAYC,IAAIC,MAAMmC,EAAIX,IAAIgC,WAC5BC,QAAQ,cACV7C,EAAU1B,EAAMoB,MAAMoD,eAG7B,CACCC,QAAS,MACNC,EAAD,CAASC,MAAI,EAAClC,KAAK,QAAQ/B,KAAK,QAAO,MAKzCkE,QAAS,MACN,OAAD,CAAMC,MAAO,CAAEC,SAAU,UAAW,SAC3B7B,EAAIN,MAAM,kBAW5B,MACJoC,EAAD,CACElF,QAASA,EAAQuB,MACjBmB,QAAAA,EACAxC,KAAAA,EACAiF,YAAa,CACXC,gBAAiB3E,MACf4E,EACAC,QAEKD,GAKHA,EAAYE,UACZC,MAAMC,QAAQJ,EAAYE,UAC1B,KACYF,EAAYE,SAASG,yBAEzB7D,WAGF8D,EAAMN,EAAYE,SAASK,KAAK,SAEhC1F,KAAM2F,SAAiB9E,EAAYC,IAAI8E,WAAW5E,IAAI,CAC1DC,OAAQ,CACNwE,IAAAA,OAGIE,EACLvD,KAAKyD,GACGA,EAAER,SAASS,SAAS1D,KAAK2D,QAC3BC,EAAKH,EAAER,SAAU,CAAC,WAAY,KAAM,UACpCU,EACHtC,WAAYoC,EAAER,SAAS9C,SAG1B0D,MACC,CAACC,EAAGC,IAAM,IAAIC,KAAKF,GAAGG,UAAY,IAAID,KAAKD,GAAGE,YAE/CC,SAEEjF,MAAQsE,IACPtE,MAAQ,CACZoD,YAAa,EACb8B,MAAO,EACP5F,KAAM,EACN6F,aAAa,EACbC,aAAa,EACbC,UAAW,MAKnBC,YAAahF,EACb1B,MAAAA,EACA2G,uBAAyBC,MACRxF,MAAQwF,GAEzBC,eAAgBvG,MAAOwG,MACX5F,OAAS4F,EAAM5F,SACfC,UAAY2F,EAAM3F,sBAO/B,MAEF4F,EAAD,KACG,CACCC,QAAS,eAEJC,EAAD,CACEC,QAAQ,QACRC,SAAyC,GAA/BrH,EAAesB,MAAMmE,OAC/B6B,QAAS,OACAC,QAAQ,CACb1E,MAAO,KACP2E,QAAS,UACTnD,aAAc,KACdC,aAAc,MACdmD,gBAAiBjH,oBACJgC,KAAMxC,EAAesB,YACxBR,EAAYC,IAAIC,MAAMwB,GAAcgC,WAE7BlD,MAAMmE,OAAS,IACtBhB,QAAQ,cAEV7C,QAIZ8F,OAAOC,EAAD,UAEPR,EAAD,CAAoB9D,GAAI,cAAeqE,OAAOE,EAAD,SAGjD9C,QAAS,MAAO5C,EAAD"}