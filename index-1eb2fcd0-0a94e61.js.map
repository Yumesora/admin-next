{"version":3,"file":"index-1eb2fcd0-0a94e61.js","sources":["../src/components/table/index.tsx"],"sourcesContent":["import { useInjector } from 'hooks/use-deps-injection'\nimport { Pager } from 'models/base'\nimport { NDataTable } from 'naive-ui'\nimport { dataTableProps } from 'naive-ui/lib/data-table/src/DataTable'\nimport {\n  RowKey,\n  SortState,\n  TableColumns,\n} from 'naive-ui/lib/data-table/src/interface'\nimport { UIStore } from 'stores/ui'\nimport { defineComponent, PropType, reactive, ref, Ref, watch } from 'vue'\nimport {\n  LocationQueryValue,\n  onBeforeRouteUpdate,\n  useRoute,\n  useRouter,\n} from 'vue-router'\nimport styles from './index.module.css'\nexport const tableRowStyle = styles['table-row']\n\nexport const Table = defineComponent({\n  props: {\n    data: {\n      type: Object as PropType<Ref<any[]>>,\n      required: true,\n    },\n    noPagination: {\n      type: Boolean,\n      default: false,\n    },\n    pager: {\n      type: Object as PropType<Ref<Pager>>,\n      required: false,\n    },\n    onUpdateCheckedRowKeys: {\n      type: Function as PropType<(keys: string[]) => void>,\n      default: () => {},\n    },\n    onUpdateSorter: {\n      type: Function as PropType<\n        (\n          sortProps: { sortBy: string; sortOrder: number },\n          status: SortState,\n        ) => void\n      >,\n      default: () => {},\n    },\n    onFetchData: {\n      type: Function as PropType<\n        | ((page?: string | number | LocationQueryValue[]) => any)\n        | ((page?: any) => any)\n      >,\n      required: false,\n    },\n    columns: {\n      type: Array as PropType<TableColumns<any>>,\n      required: true,\n    },\n    nTableProps: {\n      type: Object as PropType<\n        Partial<Record<keyof typeof dataTableProps, any>>\n      >,\n      default: {},\n    },\n    maxWidth: {\n      type: Number,\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n    },\n    checkedRowKey: {\n      type: String,\n      default: 'id',\n    },\n  },\n  setup(props, ctx) {\n    const {\n      data,\n      noPagination = false,\n      pager,\n      onUpdateCheckedRowKeys,\n      onUpdateSorter,\n      nTableProps,\n      columns,\n      onFetchData: fetchData,\n      checkedRowKey = 'id',\n      maxWidth = 1200,\n    } = props\n\n    const router = useRouter()\n    const route = useRoute()\n    const checkedRowKeys = ref<RowKey[]>([])\n    const sortProps = reactive({\n      sortBy: '',\n      sortOrder: 0,\n    })\n    const loading = ref(true)\n\n    // HACK\n    const clean = watch(\n      () => data.value,\n      (n) => {\n        // if (n.length) {\n\n        // }\n        loading.value = false\n        clean()\n      },\n    )\n\n    onBeforeRouteUpdate((to, from, next) => {\n      loading.value = true\n      next()\n      loading.value = false\n    })\n\n    const ui = useInjector(UIStore)\n\n    return () => (\n      <NDataTable\n        {...nTableProps}\n        loading={props.loading ?? loading.value}\n        remote\n        scrollX={Math.max(ui.contentInsetWidth.value, maxWidth)}\n        pagination={\n          noPagination\n            ? undefined\n            : pager && {\n                page: pager.value.currentPage,\n                pageSize: pager.value.size,\n                pageCount: pager.value.totalPage,\n                // showQuickJumper: ui.viewport.value.mobile ? false : true,\n                showQuickJumper: true,\n                pageSlot: ui.viewport.value.mobile\n                  ? ui.contentInsetWidth.value < 400\n                    ? 2\n                    : 3\n                  : undefined,\n                onChange: async (page) => {\n                  router.push({\n                    query: { ...route.query, page },\n                    path: route.path,\n                  })\n                },\n              }\n        }\n        bordered={false}\n        data={data.value}\n        checkedRowKeys={checkedRowKeys.value}\n        rowKey={(r) => r[checkedRowKey]}\n        onUpdateCheckedRowKeys={(keys) => {\n          checkedRowKeys.value = keys\n          onUpdateCheckedRowKeys?.(keys as any)\n        }}\n        rowClassName={() => styles['table-row']}\n        onUpdateSorter={async (status) => {\n          if (!status) {\n            return\n          }\n\n          columns.forEach((column) => {\n            /** column.sortOrder !== undefined means it is uncontrolled */\n            if (!('sortOrder' in column)) {\n              return\n            }\n            if (column.sortOrder === undefined) return\n            if (!status) {\n              column.sortOrder = false\n              return\n            }\n            if (column.key === status.columnKey) column.sortOrder = status.order\n            else column.sortOrder = false\n          })\n\n          const { columnKey, order } = status\n\n          sortProps.sortBy =\n            sortProps.sortBy && sortProps.sortBy == columnKey\n              ? ''\n              : (columnKey as string)\n          sortProps.sortOrder = order ? { descend: -1, ascend: 1 }[order] : 1\n          onUpdateSorter?.(sortProps, status)\n          if (fetchData) {\n            await fetchData()\n          }\n        }}\n        columns={columns}\n      ></NDataTable>\n    )\n  },\n})\n"],"names":["tableRowStyle","styles","Table","defineComponent","props","data","type","Object","required","noPagination","Boolean","default","pager","onUpdateCheckedRowKeys","Function","onUpdateSorter","onFetchData","columns","Array","nTableProps","maxWidth","Number","loading","checkedRowKey","String","setup","ctx","fetchData","router","useRouter","route","useRoute","checkedRowKeys","ref","sortProps","reactive","sortBy","sortOrder","clean","watch","value","n","to","from","next","ui","useInjector","UIStore","NDataTable","remote","scrollX","Math","max","contentInsetWidth","pagination","page","currentPage","pageSize","size","pageCount","totalPage","showQuickJumper","pageSlot","viewport","mobile","onChange","async","push","query","path","bordered","rowKey","r","keys","rowClassName","status","forEach","column","key","columnKey","order","descend","ascend"],"mappings":"4LAkBaA,EAAgBC,EAEhBC,EAAQC,EAAgB,CACnCC,MAAO,CACLC,KAAM,CACJC,KAAMC,OACNC,UAAU,GAEZC,aAAc,CACZH,KAAMI,QACNC,SAAS,GAEXC,MAAO,CACLN,KAAMC,OACNC,UAAU,GAEZK,uBAAwB,CACtBP,KAAMQ,SACNH,QAAS,QAEXI,eAAgB,CACdT,KAAMQ,SAMNH,QAAS,QAEXK,YAAa,CACXV,KAAMQ,SAINN,UAAU,GAEZS,QAAS,CACPX,KAAMY,MACNV,UAAU,GAEZW,YAAa,CACXb,KAAMC,OAGNI,QAAS,IAEXS,SAAU,CACRd,KAAMe,QAERC,QAAS,CACPhB,KAAMI,QACNC,SAAS,GAEXY,cAAe,CACbjB,KAAMkB,OACNb,QAAS,OAGbc,MAAMrB,EAAOsB,SACLrB,KACJA,eACAI,GAAe,QACfG,yBACAC,iBACAE,cACAI,UACAF,EACAD,YAAaW,gBACbJ,EAAgB,cAChBH,EAAW,MACThB,EAEEwB,EAASC,IACTC,EAAQC,IACRC,EAAiBC,EAAc,IAC/BC,EAAYC,EAAS,CACzBC,OAAQ,GACRC,UAAW,IAEPf,EAAUW,GAAI,GAGdK,EAAQC,GACZ,IAAMlC,EAAKmC,QACVC,MAISD,OAAQ,YAKA,CAACE,EAAIC,EAAMC,OACrBJ,OAAQ,QAERA,OAAQ,WAGZK,EAAKC,EAAYC,SAEhB,oBACJC,EAAD,IACM7B,EACJG,QAAS,WAAMA,WAAWA,EAAQkB,MAClCS,QAAM,EACNC,QAASC,KAAKC,IAAIP,EAAGQ,kBAAkBb,MAAOpB,GAC9CkC,WACE7C,OACI,EACAG,GAAS,CACP2C,KAAM3C,EAAM4B,MAAMgB,YAClBC,SAAU7C,EAAM4B,MAAMkB,KACtBC,UAAW/C,EAAM4B,MAAMoB,UAEvBC,iBAAiB,EACjBC,SAAUjB,EAAGkB,SAASvB,MAAMwB,OACxBnB,EAAGQ,kBAAkBb,MAAQ,IAC3B,EACA,OACF,EACJyB,SAAUC,MAAOX,MACRY,KAAK,CACVC,MAAO,IAAKtC,EAAMsC,MAAOb,KAAAA,GACzBc,KAAMvC,EAAMuC,SAKxBC,UAAU,EACVjE,KAAMA,EAAKmC,MACXR,eAAgBA,EAAeQ,MAC/B+B,OAASC,GAAMA,EAAEjD,GACjBV,uBAAyB4D,MACRjC,MAAQiC,aACEA,IAE3BC,aAAc,IAAMzE,EACpBc,eAAgBmD,MAAOS,QAChBA,WAIGC,SAASC,kBAEMA,QAGI,IAArBA,EAAOxC,YACNsC,GAIDE,EAAOC,MAAQH,EAAOI,YAAkB1C,UAAYsC,EAAOK,QAHtD3C,WAAY,YAOjB0C,UAAEA,QAAWC,GAAUL,IAEnBvC,OACRF,EAAUE,QAAUF,EAAUE,QAAU2C,EACpC,GACCA,IACG1C,UAAY2C,EAAQ,CAAEC,WAAaC,OAAQ,GAAIF,GAAS,aACjD9C,EAAWyC,GACxBhD,SACIA,KAGVV,QAAAA"}