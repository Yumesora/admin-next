{"version":3,"file":"category-b114edae-5f8c35f.js","sources":["../src/views/manage-posts/category.tsx"],"sourcesContent":["import Add12Filled from '@vicons/fluent/es/Add12Filled'\nimport { HeaderActionButton } from 'components/button/rounded-button'\nimport { tableRowStyle } from 'components/table'\nimport { ContentLayout } from 'layouts/content'\nimport { TagModel } from 'models/category'\nimport { PostModel } from 'models/post'\nimport {\n  NBadge,\n  NButton,\n  NCard,\n  NDataTable,\n  NForm,\n  NFormItemRow,\n  NH3,\n  NInput,\n  NModal,\n  NPopconfirm,\n  NSpace,\n  NTag,\n  useMessage,\n} from 'naive-ui'\nimport { CategoryStore } from 'stores/category'\nimport { useInjector } from 'hooks/use-deps-injection'\nimport { RESTManager } from 'utils/rest'\nimport { defineComponent, onMounted, reactive, Ref, ref, watch } from 'vue'\nimport { RouterLink } from 'vue-router'\n\nexport const CategoryView = defineComponent((props) => {\n  const categoryStore = useInjector(CategoryStore)\n\n  const tags = reactive<TagModel[]>([])\n  const loading = ref(true)\n  const fetchCategory = categoryStore.fetch\n\n  const message = useMessage()\n  onMounted(async () => {\n    loading.value = true\n    await fetchCategory()\n    loading.value = false\n    const { data: $tags } = (await RESTManager.api.categories.get({\n      params: { type: 'tag' },\n    })) as any\n\n    tags.push(...$tags)\n  })\n\n  const checkedTag = ref('')\n  const checkedTagPosts = reactive<PostModel[]>([])\n\n  watch(\n    () => checkedTag.value,\n    async (name) => {\n      const res = (await RESTManager.api\n        .categories(name)\n        .get({ params: { tag: 'true' } })) as any\n      checkedTagPosts.length = 0\n      checkedTagPosts.push(...res.data)\n    },\n  )\n\n  const showDialog = ref<boolean | string>(false)\n  const resetState = () => ({ name: '', slug: '' })\n  const editCategoryState = ref<CategoryState>(resetState())\n  return () => (\n    <ContentLayout\n      actionsElement={\n        <>\n          <HeaderActionButton\n            variant=\"success\"\n            icon={<Add12Filled />}\n            onClick={() => {\n              showDialog.value = true\n              editCategoryState.value = resetState()\n            }}\n          ></HeaderActionButton>\n        </>\n      }\n    >\n      <NH3 prefix=\"bar\">分类</NH3>\n\n      {/* Action */}\n      <EditCategoryDialog\n        show={showDialog}\n        onSubmit={async (state) => {\n          const { name, slug } = state\n          const id =\n            typeof showDialog.value == 'string' ? showDialog.value : null\n          if (!id) {\n            const payload = (await RESTManager.api.categories.post({\n              data: {\n                name,\n                slug,\n              },\n            })) as any\n            message.success('创建成功')\n            categoryStore.data.value!.push(payload.data)\n          } else {\n            await RESTManager.api.categories(id).put({\n              data: {\n                name,\n                slug,\n                type: 0,\n              },\n            })\n\n            message.success('修改成功')\n\n            const index = categoryStore.data.value!.findIndex((i) => i.id == id)\n            categoryStore.data.value![index] = {\n              ...categoryStore.data.value![index],\n              ...state,\n            }\n          }\n        }}\n        initialState={editCategoryState.value}\n      />\n\n      <NDataTable\n        rowClassName={() => tableRowStyle}\n        size=\"small\"\n        bordered={false}\n        data={categoryStore.data.value || []}\n        remote\n        loading={loading.value}\n        columns={[\n          { title: '名称', key: 'name' },\n          { title: '数', key: 'count' },\n          { title: '路径', key: 'slug', width: 300 },\n          {\n            width: 300,\n            title: '操作',\n            fixed: 'right',\n            key: 'id',\n            render(row) {\n              return (\n                <NSpace size={12}>\n                  <NButton\n                    size=\"tiny\"\n                    text\n                    type=\"primary\"\n                    onClick={(e) => {\n                      editCategoryState.value = {\n                        name: row.name,\n                        slug: row.slug,\n                      }\n\n                      showDialog.value = row.id\n                    }}\n                  >\n                    编辑\n                  </NButton>\n\n                  <NPopconfirm\n                    positiveText={'取消'}\n                    negativeText=\"删除\"\n                    onNegativeClick={async () => {\n                      await RESTManager.api.categories(row.id).delete()\n                      message.success('删除成功')\n                      await categoryStore.fetch(true)\n                    }}\n                  >\n                    {{\n                      trigger: () => (\n                        <NButton text type=\"error\" size=\"tiny\">\n                          移除\n                        </NButton>\n                      ),\n\n                      default: () => (\n                        <span style={{ maxWidth: '12rem' }}>\n                          确定要删除 {row.title} ?\n                        </span>\n                      ),\n                    }}\n                  </NPopconfirm>\n                </NSpace>\n              )\n            },\n          },\n        ]}\n      />\n\n      <NH3 prefix=\"bar\">标签</NH3>\n      <NSpace size={12}>\n        {tags.map((tag) => {\n          return (\n            <NBadge value={tag.count} key={tag.name}>\n              <NTag\n                class=\"border-gray-200 border\"\n                round\n                type=\"success\"\n                checkable\n                bordered\n                checked={checkedTag.value == tag.name}\n                onUpdateChecked={(check) => {\n                  if (check) {\n                    checkedTag.value = tag.name\n                  } else {\n                    checkedTag.value = ''\n                  }\n                }}\n              >\n                {tag.name}\n              </NTag>\n            </NBadge>\n          )\n        })}\n      </NSpace>\n\n      {checkedTagPosts.length != 0 && (\n        <NDataTable\n          remote\n          class=\"mt-4\"\n          data={checkedTagPosts}\n          columns={[\n            {\n              title: '标题',\n              key: 'title',\n              render(row) {\n                return (\n                  <RouterLink to={'/posts/edit?id=' + row.id}>\n                    <NButton type=\"primary\" text>\n                      {row.title}\n                    </NButton>\n                  </RouterLink>\n                )\n              },\n            },\n            {\n              title: '分类',\n              key: 'category',\n              render(row) {\n                return row.category.name\n              },\n            },\n          ]}\n        />\n      )}\n    </ContentLayout>\n  )\n})\n\ntype CategoryState = {\n  name: string\n  slug: string\n}\nconst EditCategoryDialog = defineComponent<{\n  initialState?: CategoryState\n  onSubmit: (state: CategoryState) => void\n  show: Ref<boolean | string>\n}>((props) => {\n  const state = reactive<CategoryState>(\n    props.initialState ?? { name: '', slug: '' },\n  )\n\n  watch(\n    () => props.initialState,\n    (n) => {\n      if (n) {\n        state.name = n.name\n        state.slug = n.slug\n      }\n    },\n  )\n  const message = useMessage()\n  const onSubmit = () => {\n    if (!state.name || !state.slug) {\n      message.error('名字 和 路径 不能为空')\n      return\n    }\n    props.onSubmit(state)\n    props.show.value = false\n  }\n\n  return () => (\n    <NModal\n      show={!!props.show.value}\n      onUpdateShow={(s) => {\n        props.show.value = s\n      }}\n    >\n      {{\n        default: () => (\n          <NCard\n            style=\"width: 500px;max-width: 90vw\"\n            headerStyle={{ textAlign: 'center' }}\n            title={props.initialState ? '编辑' : '新建'}\n          >\n            <NForm\n              onSubmit={onSubmit}\n              rules={{\n                name: {\n                  required: true,\n                  trigger: ['input', 'blur'],\n                },\n                slug: {\n                  required: true,\n                  trigger: ['input', 'blur'],\n                },\n              }}\n            >\n              <NFormItemRow path=\"name\" label=\"名字\">\n                <NInput\n                  placeholder=\"\"\n                  onInput={(e) => {\n                    state.name = e\n                  }}\n                  value={state.name}\n                ></NInput>\n              </NFormItemRow>\n\n              <NFormItemRow path=\"slug\" label=\"路径\">\n                <NInput\n                  placeholder=\"\"\n                  onInput={(e) => {\n                    state.slug = e\n                  }}\n                  value={state.slug}\n                ></NInput>\n              </NFormItemRow>\n\n              <div class=\"text-center\">\n                <NSpace size={12} align=\"center\" inline>\n                  <NButton type=\"success\" onClick={onSubmit} round>\n                    确定\n                  </NButton>\n                  <NButton onClick={() => (props.show.value = false)} round>\n                    取消\n                  </NButton>\n                </NSpace>\n              </div>\n            </NForm>\n          </NCard>\n        ),\n      }}\n    </NModal>\n  )\n})\n\nEditCategoryDialog.props = ['initialState', 'onSubmit', 'show'] as const\n"],"names":["CategoryView","defineComponent","props","categoryStore","useInjector","CategoryStore","tags","reactive","loading","ref","fetchCategory","fetch","message","useMessage","async","value","data","$tags","RESTManager","api","categories","get","params","type","push","checkedTag","checkedTagPosts","name","res","tag","length","showDialog","editCategoryState","slug","ContentLayout","actionsElement","HeaderActionButton","variant","icon","Add12Filled","onClick","NH3","prefix","EditCategoryDialog","show","onSubmit","state","id","put","success","index","findIndex","i","payload","post","initialState","NDataTable","rowClassName","tableRowStyle","size","bordered","remote","columns","title","key","width","fixed","render","row","NSpace","NButton","text","e","NPopconfirm","positiveText","negativeText","onNegativeClick","delete","trigger","default","style","maxWidth","map","NBadge","count","NTag","class","round","checkable","checked","onUpdateChecked","check","RouterLink","to","category","n","error","NModal","onUpdateShow","s","NCard","headerStyle","textAlign","NForm","rules","required","NFormItemRow","path","label","NInput","placeholder","onInput","align","inline"],"mappings":"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"}