{"version":3,"file":"cron-8bc80998-e1cfe40.js","sources":["../src/views/other/cron.tsx"],"sourcesContent":["import { Table } from 'components/table'\nimport { format } from 'date-fns'\nimport { useTable } from 'hooks/use-table'\nimport { ContentLayout } from 'layouts/content'\nimport { NButton, NPopconfirm, NSpace } from 'naive-ui'\nimport { RESTManager, toPascalCase } from 'utils'\n\nexport default defineComponent({\n  setup() {\n    const { data, fetchDataFn, loading } = useTable((dataRef) => {\n      return async () => {\n        const data = (await RESTManager.api.health.cron.get()) as any\n        dataRef.value = Array.from(\n          Object.values(data.data).map((item: any) => ({\n            ...item,\n            _name: item.name,\n            name: toPascalCase(item.name),\n          })),\n        )\n      }\n    })\n    onMounted(async () => {\n      await fetchDataFn()\n    })\n    const executeCron = async (name: string, niceName: string) => {\n      await RESTManager.api.health.cron.run(name).post()\n      // 开始轮询状态\n      let timer: any = setTimeout(function polling() {\n        RESTManager.api.health.cron\n          .task(name)\n          .get()\n          .then((data: any) => {\n            if (data.status === 'fulfill') {\n              message.success(`${niceName} 执行完成`)\n              timer = clearTimeout(timer)\n            } else if (data.status === 'reject') {\n              message.error(`${niceName} 执行失败, ` + data.message)\n              timer = clearTimeout(timer)\n            } else {\n              polling()\n            }\n          })\n      }, 1000)\n    }\n    return () => (\n      <ContentLayout>\n        <Table\n          noPagination\n          data={data}\n          loading={loading.value}\n          nTableProps={{\n            maxHeight: 'calc(100vh - 17rem)',\n          }}\n          maxWidth={500}\n          columns={[\n            {\n              title: '任务',\n              key: 'name',\n              ellipsis: { tooltip: true },\n              width: 150,\n            },\n            {\n              title: '描述',\n              key: 'description',\n              width: 250,\n              ellipsis: { tooltip: true },\n            },\n            { title: '状态', key: 'status' },\n            {\n              title: '下次执行',\n              key: '',\n              render(row) {\n                const nextDate: any = row.nextDate\n                if (!nextDate) {\n                  return 'N/A'\n                }\n                return format(new Date(nextDate), 'MM/dd/yyyy hh:mm:ss')\n              },\n            },\n            {\n              title: '操作',\n              key: '',\n              render(row) {\n                return (\n                  <NSpace>\n                    <NPopconfirm\n                      onPositiveClick={() =>\n                        void executeCron(row._name, row.name)\n                      }\n                    >\n                      {{\n                        trigger() {\n                          return (\n                            <NButton size=\"tiny\" text type=\"success\">\n                              执行\n                            </NButton>\n                          )\n                        },\n                        default: () => (\n                          <span style={{ maxWidth: '12rem' }}>确定要执行?</span>\n                        ),\n                      }}\n                    </NPopconfirm>\n                  </NSpace>\n                )\n              },\n            },\n          ]}\n        ></Table>\n      </ContentLayout>\n    )\n  },\n})\n"],"names":["defineComponent","setup","data","fetchDataFn","loading","useTable","dataRef","async","data2","RESTManager","api","health","cron","get","value","Array","from","Object","values","map","item","_name","name","toPascalCase","ContentLayout","Table","noPagination","nTableProps","maxHeight","maxWidth","columns","title","key","ellipsis","tooltip","width","render","row","nextDate","format","Date","NSpace","NPopconfirm","onPositiveClick","niceName","run","post","timer","setTimeout","task","then","status","success","clearTimeout","error","message","executeCron","trigger","NButton","size","text","type","default","style"],"mappings":"8RAOA,MAAeA,EAAgB,CAC7BC,cACQC,KAAEA,cAAMC,UAAaC,GAAYC,GAAUC,GACxCC,gBACCC,QAAcC,EAAYC,IAAIC,OAAOC,KAAKC,QACxCC,MAAQC,MAAMC,KACpBC,OAAOC,OAAOV,EAAKN,MAAMiB,KAAKC,QACzBA,EACHC,MAAOD,EAAKE,KACZA,KAAMC,EAAaH,EAAKE,iBAKtBf,gBACFJ,aAsBD,MACJqB,EAAD,OACGC,EAAD,CACEC,cAAY,EACZxB,KAAAA,EACAE,QAASA,EAAQU,MACjBa,YAAa,CACXC,UAAW,uBAEbC,SAAU,IACVC,QAAS,CACP,CACEC,MAAO,KACPC,IAAK,OACLC,SAAU,CAAEC,SAAS,GACrBC,MAAO,KAET,CACEJ,MAAO,KACPC,IAAK,cACLG,MAAO,IACPF,SAAU,CAAEC,SAAS,IAEvB,CAAEH,MAAO,KAAMC,IAAK,UACpB,CACED,MAAO,OACPC,IAAK,GACLI,OAAOC,SACCC,EAAgBD,EAAIC,gBACrBA,EAGEC,EAAO,IAAIC,KAAKF,GAAW,uBAFzB,QAKb,CACEP,MAAO,KACPC,IAAK,GACLI,OAAOC,KAEFI,EAAD,OACGC,EAAD,CACEC,gBAAiB,KA9DfpC,OAAOe,EAAcsB,WACjCnC,EAAYC,IAAIC,OAAOC,KAAKiC,IAAIvB,GAAMwB,WAExCC,EAAaC,YAAW,eACdtC,IAAIC,OAAOC,KACpBqC,KAAK3B,GACLT,MACAqC,MAAM1C,IACe,YAAhBA,EAAK2C,gBACCC,QAAQ,GAAGR,YACXS,aAAaN,IACI,WAAhBvC,EAAK2C,gBACNG,MAAM,GAAGV,WAAoBpC,EAAK+C,WAClCF,aAAaN,aAK1B,MA6CoBS,CAAYnB,EAAIhB,MAAOgB,EAAIf,QAGjC,CACCmC,cAEKC,EAAD,CAASC,KAAK,OAAOC,MAAI,EAACC,KAAK,WAAU,MAK7CC,QAAS,MACN,OAAD,CAAMC,MAAO,CAAElC,SAAU,UAAW"}