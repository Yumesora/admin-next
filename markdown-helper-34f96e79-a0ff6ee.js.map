{"version":3,"file":"markdown-helper-34f96e79-a0ff6ee.js","sources":["../src/utils/markdown-parser.ts","../src/views/other/markdown-helper.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nexport class ParseMarkdownYAML {\n  constructor(private strList: string[]) {}\n\n  parse(str: string) {\n    const raw = str\n\n    const parts = /-{3,}\\n(.*?)-{3,}\\n*(.*)$/gms.exec(raw)\n    if (!parts) {\n      return { text: raw }\n    }\n    const parttenYAML = parts[1]\n    const text = parts.pop()\n    const parseYAML = parttenYAML.split('\\n')\n\n    const tags = [] as string[]\n    const categories = [] as string[]\n\n    let cur: 'cate' | 'tag' | null = null\n    const meta: any = parseYAML.reduce((meta, current) => {\n      const splitPart = current\n        .trim()\n        .split(':')\n        .filter((item) => item.length)\n      const sp =\n        splitPart.length >= 2\n          ? [\n              splitPart[0],\n              splitPart\n                .slice(1)\n                .filter((item) => item.length)\n                .join(':')\n                .trim(),\n            ]\n          : [splitPart[0]]\n\n      if (sp.length === 2) {\n        const [property, value] = sp\n        if (['date', 'updated'].includes(property)) {\n          meta[property] = new Date(value.trim()).toISOString()\n        } else if (['categories:', 'tags:'].includes(property)) {\n          cur = property === 'categories:' ? 'cate' : 'tag'\n        } else meta[property] = value.trim()\n      } else {\n        const item = current.trim().replace(/^\\s*-\\s*/, '')\n\n        if (['', 'tags:', 'categories:'].includes(item)) {\n          cur = item === 'categories:' ? 'cate' : 'tag'\n          return meta\n        }\n        if (cur === 'tag') {\n          tags.push(item)\n        } else {\n          categories.push(item)\n        }\n      }\n      return meta\n    }, {})\n\n    meta.categories = categories\n    meta.tags = tags\n    return { meta, text } as ParsedModel\n  }\n\n  start() {\n    const files = this.strList\n    const contents = [] as ParsedModel[]\n    for (const file of files) {\n      contents.push(this.parse(file))\n    }\n    return contents\n  }\n}\n\nexport interface ParsedModel {\n  meta?: {\n    title: string\n    updated: string\n    date: string\n    categories: Array<string>\n    tags: Array<string>\n    slug: string\n  }\n  text: string\n}\n","import { ContentLayout } from 'layouts/content'\nimport {\n  NButton,\n  NButtonGroup,\n  NForm,\n  NFormItem,\n  NH3,\n  NSelect,\n  NSpace,\n  NSwitch,\n  NText,\n  NUpload,\n  useMessage,\n} from 'naive-ui'\nimport { FileInfo } from 'naive-ui/lib/upload/src/interface'\nimport { responseBlobToFile, RESTManager } from 'utils'\nimport { ParsedModel, ParseMarkdownYAML } from 'utils/markdown-parser'\nimport { defineComponent, ref, unref, watch } from 'vue'\n\nenum ImportType {\n  Post,\n  Note,\n}\nconst types = [\n  {\n    value: ImportType.Post,\n    label: '博文',\n  },\n  {\n    label: '日记',\n    value: ImportType.Note,\n  },\n]\nexport default defineComponent(() => {\n  const importType = ref(ImportType.Post)\n  const fileList = ref([] as FileInfo[])\n  const parsedList = ref([] as (ParsedModel & { filename: string })[])\n  function parseMarkdown(strList: string[]) {\n    const parser = new ParseMarkdownYAML(strList)\n    return parser.start().map((i, index) => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const filename = fileList.value[index].file!.name\n      const title = filename.replace(/\\.md$/, '')\n      if (i.meta) {\n        i.meta.slug = i.meta.slug ?? title\n      } else {\n        i.meta = {\n          title,\n          slug: title,\n        } as any\n      }\n\n      if (!i.meta?.date) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        i.meta!.date = new Date().toISOString()\n      }\n      return i\n    })\n  }\n  const message = useMessage()\n  async function handleParse(e?: MouseEvent) {\n    e?.preventDefault()\n    e?.stopPropagation()\n    if (!fileList.value.length) {\n      throw new ReferenceError('fileList is empty')\n    }\n    const strList = [] as string[]\n    for await (const _file of fileList.value) {\n      const res = await Promise.resolve(\n        new Promise((resolve, reject) => {\n          const file = _file.file as File | null\n          if (!file) {\n            return reject('File is empty')\n          }\n          if (file.type !== 'text/markdown') {\n            message.error('只能转换 markdown 文件')\n            return reject('File must be markdown.')\n          }\n          const reader = new FileReader()\n          reader.onload = (e) => {\n            // console.log(e.target?.result)\n            resolve((e.target?.result as string) || '')\n          }\n          reader.readAsText(file)\n        }),\n      )\n      strList.push(res as string)\n    }\n    const parsedList_ = parseMarkdown(strList)\n    message.success('解析完成, 结果查看 console 哦')\n    parsedList.value = parsedList_.map((v, index) => ({\n      ...v,\n      filename: fileList.value[index].file?.name ?? '',\n    }))\n    console.log(unref(parsedList))\n  }\n\n  async function handleUpload(e: MouseEvent) {\n    e.stopPropagation()\n    e.preventDefault()\n    if (!parsedList.value.length) {\n      return message.error('请先解析!!')\n    }\n    await RESTManager.api.markdown.import.post({\n      data: {\n        type: importType.value,\n        data: parsedList.value,\n      },\n    })\n\n    message.success('上传成功!')\n    fileList.value = []\n  }\n\n  const includeYAMLHeader = ref(true)\n  const titleBigTitle = ref(false)\n  async function handleExportMarkdown() {\n    const data = await RESTManager.api.markdown.export.get({\n      params: {\n        slug: 1,\n        yaml: includeYAMLHeader.value,\n        show_title: titleBigTitle.value,\n      },\n      responseType: 'blob',\n    })\n\n    responseBlobToFile(data, 'markdown.zip')\n  }\n\n  watch(\n    () => fileList.value,\n    (n) => {\n      console.log(n)\n\n      if (n.length == 0) {\n        parsedList.value = []\n      } else {\n        handleParse()\n      }\n    },\n  )\n\n  return () => (\n    <ContentLayout>\n      <NH3>从 MarkDown 导入数据</NH3>\n      <NForm\n        labelAlign=\"right\"\n        labelPlacement=\"left\"\n        labelWidth={150}\n        class=\"max-w-[300px]\"\n      >\n        <NFormItem label=\"导入到:\">\n          <NSelect\n            options={types}\n            value={importType.value}\n            onUpdateValue={(e) => void (importType.value = e)}\n          ></NSelect>\n        </NFormItem>\n        <NFormItem label=\"准备好了吗.\">\n          <NSpace vertical>\n            <NUpload\n              multiple\n              accept=\".md,.markdown\"\n              onChange={(e) => {\n                fileList.value = e.fileList\n              }}\n              onRemove={(e) => {\n                const removedFile = e.file\n                const name = removedFile.name\n                const index = parsedList.value.findIndex(\n                  (i) => i.filename === name,\n                )\n                if (index != -1) {\n                  parsedList.value.splice(index, 1)\n                }\n              }}\n            >\n              <NButtonGroup>\n                <NButton round>先上传</NButton>\n                <NButton\n                  onClick={handleParse}\n                  disabled={!fileList.value.length}\n                >\n                  再解析\n                </NButton>\n                <NButton\n                  onClick={handleUpload}\n                  round\n                  disabled={!parsedList.value.length}\n                >\n                  最后导入\n                </NButton>\n              </NButtonGroup>\n            </NUpload>\n\n            <NText depth={2} class=\"!text-sm\">\n              只能上传markdown文件\n            </NText>\n          </NSpace>\n        </NFormItem>\n      </NForm>\n      <NH3>导出数据到 Markdown (Hexo YAML Format)</NH3>\n      <NForm\n        labelAlign=\"right\"\n        labelPlacement=\"left\"\n        labelWidth={180}\n        class=\"max-w-[400px]\"\n      >\n        <NFormItem label=\"是否包括 yaml header\">\n          <NSwitch\n            value={includeYAMLHeader.value}\n            onUpdateValue={(e) => void (includeYAMLHeader.value = e)}\n          ></NSwitch>\n        </NFormItem>\n        <NFormItem label=\"是否在第一行显示文章标题\">\n          <NSwitch\n            value={titleBigTitle.value}\n            onUpdateValue={(e) => void (titleBigTitle.value = e)}\n          ></NSwitch>\n        </NFormItem>\n        <div class=\"text-right w-full\">\n          <NButton type=\"primary\" onClick={handleExportMarkdown}>\n            导出\n          </NButton>\n        </div>\n      </NForm>\n    </ContentLayout>\n  )\n})\n"],"names":["constructor","strList","parse","str","raw","parts","exec","text","parttenYAML","pop","parseYAML","split","tags","categories","cur","meta","reduce","meta2","current","splitPart","trim","filter","item","length","sp","slice","join","property","value","includes","Date","toISOString","replace","push","start","files","this","contents","file","ImportType","ImportType2","types","label","defineComponent","importType","ref","fileList","parsedList","message","useMessage","e","preventDefault","stopPropagation","ReferenceError","_file","res","Promise","resolve","reject","type","error","reader","FileReader","onload","e2","target","result","readAsText","parsedList_","ParseMarkdownYAML","map","i","index","title","name","slug","date","parseMarkdown","success","v","filename","log","unref","RESTManager","api","markdown","import","post","data","includeYAMLHeader","titleBigTitle","export","get","params","yaml","show_title","responseType","n","ContentLayout","NH3","NForm","labelAlign","labelPlacement","labelWidth","class","NFormItem","NSelect","options","onUpdateValue","NSpace","vertical","NUpload","multiple","accept","onChange","onRemove","findIndex","splice","NButtonGroup","NButton","round","onClick","handleParse","disabled","handleUpload","NText","depth","NSwitch","handleExportMarkdown"],"mappings":"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"}