{"version":3,"file":"edit-column-20761915-194e3b7.js","sources":["../src/components/table/edit-column.tsx"],"sourcesContent":["import { useInjector } from 'hooks/use-deps-injection'\nimport { NInput, NSelect, useMessage } from 'naive-ui'\nimport { SelectMixedOption } from 'naive-ui/lib/select/src/interface'\nimport { CategoryStore } from 'stores/category'\nimport { defineComponent, PropType, ref, watch } from 'vue'\n\nexport const EditColumn = defineComponent({\n  props: {\n    initialValue: {\n      type: String,\n      required: true,\n    },\n    onSubmit: {\n      type: Function as PropType<(value: string) => void>,\n      required: true,\n    },\n    placeholder: {\n      type: String,\n    },\n\n    type: {\n      type: String as PropType<'input' | 'select'>,\n      default: 'input',\n    },\n    options: {\n      type: Array as PropType<SelectMixedOption[]>,\n      default: () => [],\n    },\n    returnToConfrim: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  setup(props) {\n    const value = ref(props.initialValue)\n\n    watch(\n      () => props.initialValue,\n      (n) => {\n        value.value = n\n      },\n    )\n\n    const isEdit = ref(false)\n    const inputRef = ref<HTMLInputElement>()\n    const message = useMessage()\n    watch(\n      () => isEdit.value,\n      (n) => {\n        if (!props.returnToConfrim) {\n          return\n        }\n        if (n) {\n          message.info('回车以完成修改', { duration: 1500 })\n          requestAnimationFrame(() => {\n            inputRef.value?.focus()\n          })\n        }\n      },\n    )\n    const handleSubmit = () => {\n      props.onSubmit(value.value)\n      isEdit.value = false\n    }\n    const categoryStore = useInjector(CategoryStore)\n    return () => (\n      <>\n        {isEdit.value ? (\n          <div class=\"flex items-center w-full relative flex-nowrap\">\n            {(() => {\n              switch (props.type) {\n                case 'input': {\n                  return (\n                    <NInput\n                      onKeydown={(e) => {\n                        if (e.key == 'Enter') {\n                          handleSubmit()\n                        }\n                      }}\n                      class=\"w-3/4\"\n                      value={value.value}\n                      placeholder={props.placeholder ?? props.initialValue}\n                      size=\"tiny\"\n                      autofocus\n                      ref={inputRef}\n                      onBlur={() => {\n                        isEdit.value = false\n                      }}\n                      onInput={(e) => {\n                        value.value = e\n                      }}\n                    ></NInput>\n                  )\n                }\n                case 'select': {\n                  return (\n                    <NSelect\n                      class=\"w-full\"\n                      placeholder={props.placeholder ?? props.initialValue}\n                      value={value.value}\n                      onUpdateValue={(e) => {\n                        value.value = e\n                        handleSubmit()\n                      }}\n                      onBlur={() => {\n                        isEdit.value = false\n                      }}\n                      options={props.options}\n                    ></NSelect>\n                  )\n                }\n              }\n            })()}\n          </div>\n        ) : (\n          <button\n            class=\"w-full text-left\"\n            onClick={() => {\n              isEdit.value = true\n            }}\n          >\n            {props.initialValue}&nbsp;\n          </button>\n        )}\n      </>\n    )\n  },\n})\n"],"names":["EditColumn","defineComponent","props","initialValue","type","String","required","onSubmit","Function","placeholder","default","options","Array","returnToConfrim","Boolean","setup","value","ref","n","isEdit","inputRef","message","useMessage","info","duration","focus","handleSubmit","CategoryStore","class","NInput","onKeydown","e","key","size","autofocus","onBlur","onInput","NSelect","onUpdateValue","onClick"],"mappings":"uJAMaA,EAAaC,EAAgB,CACxCC,MAAO,CACLC,aAAc,CACZC,KAAMC,OACNC,UAAU,GAEZC,SAAU,CACRH,KAAMI,SACNF,UAAU,GAEZG,YAAa,CACXL,KAAMC,QAGRD,KAAM,CACJA,KAAMC,OACNK,QAAS,SAEXC,QAAS,CACPP,KAAMQ,MACNF,QAAS,IAAM,IAEjBG,gBAAiB,CACfT,KAAMU,QACNJ,SAAS,IAGbK,MAAMb,SACEc,EAAQC,EAAIf,EAAMC,iBAGtB,IAAMD,EAAMC,eACXe,MACOF,MAAQE,WAIZC,EAASF,GAAI,GACbG,EAAWH,IACXI,EAAUC,OAEd,IAAMH,EAAOH,QACZE,IACMhB,EAAMW,iBAGPK,MACMK,KAAK,UAAW,CAAEC,SAAU,8BACd,sBACXR,UAAOS,qBAKlBC,EAAe,OACbnB,SAASS,EAAMA,SACdA,OAAQ,YAEiBW,GAC3B,aAEFR,EAAOH,QACL,MAAD,CAAKY,MAAM,sEAEC1B,EAAME,UACP,iBAEAyB,EAAD,CACEC,UAAYC,IACG,SAATA,EAAEC,UAIRJ,MAAM,QACNZ,MAAOA,EAAMA,MACbP,YAAa,WAAMA,eAAeP,EAAMC,aACxC8B,KAAK,OACLC,WAAS,EACTjB,IAAKG,EACLe,OAAQ,OACCnB,OAAQ,GAEjBoB,QAAUL,MACFf,MAAQe,SAKjB,kBAEAM,EAAD,CACET,MAAM,SACNnB,YAAa,WAAMA,eAAeP,EAAMC,aACxCa,MAAOA,EAAMA,MACbsB,cAAgBP,MACRf,MAAQe,OAGhBI,OAAQ,OACCnB,OAAQ,GAEjBL,QAAST,EAAMS,kBAQ1B,SAAD,CACEiB,MAAM,mBACNW,QAAS,OACAvB,OAAQ,IAGhBd,EAAMC,aAAa"}